@page "/mylist"
@inject HttpClient client
@inject IJSRuntime js

<h1>My List</h1>

<p>Here new movies can be added, edited, or deleted from the list!</p>

@*Links to add new movie page*@
<div class="form-group">
    <a class="btn btn-success" href="movies/create"><i class="oi oi-plus"></i>Add New Movie</a>
</div>

<br />

@if (movies == null)
{
    <text>Loading...</text>
}
else if (movies.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Release Year</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            @foreach (Movie mov in movies)
            {
                        <tr>
                            <td>@mov.Title</td>
                            <td>@mov.ReleaseYear</td>
                            <td><a class="btn btn-success" href="movies/edit/@mov.Id">Edit</a></td>
                            <td>  
                                <button class="btn btn-danger" @onclick="@(() => Delete(mov.Id))">Delete</button>
                            </td>
                        </tr>
            }
            </tbody>
        </table>
}
@code {
    // Defines a list of movies
    Movie[] movies { get; set; }
    // On page load uses HTTP client to retrieve data from API endpoint
    protected override async Task OnInitializedAsync()
    {
        movies = await client.GetFromJsonAsync<Movie[]>("api/movie");
    }
    async Task Delete(int movieId)
    {
        var mov = movies.First(x => x.Id == movieId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {mov.Title}?"))
        {
            await client.DeleteAsync($"api/movie/{movieId}");
            await OnInitializedAsync();
        }
    }
}



